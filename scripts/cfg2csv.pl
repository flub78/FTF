#!/bin/sh
#! -*- perl -*-
eval 'exec ${PERL_HOME}/bin/perl ${PERL_ARGS} -x $0 ${1+"$@"}' 
  if 0;

# ------------------------------------------------------------------------
# Title:  Config2CSV configuration file into CSV
#
# File - templates/Config2CSV.pl
# Version - 1.0
#
# Abstract:
# 
#    This tools read a set of configuration files and generate
#    a comma separated values file. Its goal is to generate Excel
#    sheet from a set of test descriptions.
#
#    It has been uesed to generate an OpenOffice  tests description document
#    from test descriptions generated by the CP tests. It was
#    an experiment but we currently consider other methods.
#
# Usage:
# (Start code)
#usage: perl cfg2csv.pl [options] [filenames]*
#        -verbose         flag,     switch on verbose mode.
#        -help            flag,     display the online help.
#        -outputDirectory string,   directory for outputs
#        -result          string,   directories to parse
# (end)
# ------------------------------------------------------------------------
package Config2CSV;

use strict;
use lib "$ENV{'PERL_TEST_TOOLS_PATH'}/lib";
use lib "$ENV{'PERL_TEST_TOOLS_PATH'}/lib/site_perl";
use TestTools::Script;
use TestTools::Parser::Aconfig;
use TestTools::Conf::ScriptConfig
  qw (GetOnlineHelp GetOption NumberOfElements Initialize);


use vars qw($VERSION @ISA @EXPORT);
use Exporter;

$VERSION = 1;
@ISA = qw(TestTools::Script);

# ########################################################################
# This hash table is used to declare and define options.
my %OptionSet = (
    result   =>  {
        type => "string",
        description => "directories to parse",
        default => ""
    },
);
    
# Below is the usage method thath you inherit. Delete it if it fits your
# needs or uncomment and adapt.
## ------------------------------------------------------------------------
## method: usage
##
##  Display how to call this script and exit.
## ------------------------------------------------------------------------
#sub usage {
#  my $Self = shift;
#
#  my $name = TestTools::Script::name();
#  my $parameters = "\[filenames\]*";
#
#  print "usage: perl $name \[options\] $parameters\n";
#  print STDERR TestTools::Conf::ScriptConfig::GetOnlineHelp() ; 
#  exit();
#}

# ------------------------------------------------------------------------
# routine: printHeader
#
#  print a CSV line for the colomn name
# ------------------------------------------------------------------------
sub printHeader {
    my ($Self, $fd) = @_;
    
    my @colName = ('Name', 'Mode', 'Keep ProtCCF', 'Export SCWCK', 'Algo', 'Level',
    'CryptoPeriode', 'Memory', 'Iteration', 'Perf', 'SCWClientKey', 'Files', 'Errors');
    
    print $fd join ("; ", @colName), "\n";
}

# ------------------------------------------------------------------------
# routine: printLine
#
#  print a CSV line for one configuration
# ------------------------------------------------------------------------
sub printLine {
    my ($Self, $fd, $cfg) = @_;

    print $fd $cfg->value('Scenario', 'Identification');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'SubmissionMode');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'keepProtectedCCF');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'exportedScwClientKey');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'encryptionAlgorithm');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'encryptionLevel');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'cryptoPeriod');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'MemoryCheck');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'Iterations');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'PerformanceCheck');    
    print $fd "; ";
    print $fd $cfg->value('Scenario', 'scwClientKey');    
    print $fd "; ";
    print $fd $cfg->value('Assets', 'file0');    
    print $fd "; ";
    print $fd $cfg->value('Assets', 'error0');    
    print $fd "\n";
    
    my @list = @{$cfg->variables('Assets')};
    my $nb = scalar(@list);
    $nb = ($nb / 2) - 1;
    for (my $i = 1; $i <= $nb; $i++) {
        my $file = "file" . $i;
        my $error = "error" . $i;
        print $fd "; " x 11;
        print $fd $cfg->value('Assets', $file);        
        print $fd "; ";
        print $fd $cfg->value('Assets', $error);        
        print $fd "\n";
    }
}

# ------------------------------------------------------------------------
# routine: run
#
#  Scrip main method.
# ------------------------------------------------------------------------
sub run {
    my $Self = shift;
    
    my $name = TestTools::Script::basename();

    my $result = $Self->GetOption('result');
    my $fd = *STDOUT;
    
    if ($result ne "") {
        open( $fd, "> $result" ) || die("can't open $result: $!");
    }
    
    $Self->printHeader($fd);
    
    # for all the files specified on CLI
    foreach my $arg (@ARGV) {
	   while (glob($arg)) {
	       my $filename = $_;
	       my $cfg = new TestTools::Parser::Aconfig('filename' => $filename);
	    
	       $Self->printLine($fd, $cfg);
	   }
    }
    
    if ($result ne "") {
        close ($fd);
    }
}


# ------------------------------------------------------------------------
# read CLI and configuration file
my @argv = @ARGV;
Initialize( TestTools::Script::configurationFilename(),
    \%OptionSet, TestTools::Script::optionSet() );

my $script = new Config2CSV();

my $Dir_Option = $script->GetOption('directory');
$script->info ( "Read option \'directory\' with GetOption service : $Dir_Option \n"); 

$script->run();
